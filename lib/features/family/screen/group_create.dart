import 'package:flutter/material.dart';
import 'package:image_picker/image_picker.dart';
import 'package:myapp/route/navigate_helper.dart';
import 'dart:io';

// Import c√°c widget components
import 'package:myapp/shared/widgets/common/image_picker_widget.dart';
import 'package:myapp/shared/widgets/common/custom_text_field.dart';
import 'package:myapp/features/family/widgets/group_app_bar.dart';
import 'package:myapp/features/family/widgets/field_member_widget.dart';
import 'package:myapp/shared/widgets/common/info_guide_widget.dart';
import 'package:myapp/shared/widgets/common/info_tip_widget.dart';
import 'package:myapp/shared/widgets/dialogs/custom_diaglog.dart';

class GroupCreate extends StatefulWidget {
  const GroupCreate({super.key});

  @override
  State<GroupCreate> createState() => _GroupCreateState();
}

class _GroupCreateState extends State<GroupCreate> {
  // Core data
  File? _selectedImage;
  final ImagePicker _picker = ImagePicker();

  // Controllers
  final TextEditingController _nameController = TextEditingController();
  final TextEditingController _descriptionController = TextEditingController();
  final List<TextEditingController> _memberControllers = [];
  final List<String> _memberLabels = [];
  int _memberCount = 0;

  @override
  void initState() {
    super.initState();
    _resetAllFields();
  }

  // Reset t·∫•t c·∫£ fields
  void _resetAllFields() {
    _disposeMemberControllers();
    setState(() {
      _selectedImage = null;
      _nameController.clear();
      _descriptionController.clear();
      _memberControllers.clear();
      _memberLabels.clear();
      _memberCount = 0;
      _addMemberField();
    });
  }

  // Dispose member controllers ƒë·ªÉ tr√°nh memory leak
  void _disposeMemberControllers() {
    for (var controller in _memberControllers) {
      controller.dispose();
    }
  }

  // Th√™m field th√†nh vi√™n m·ªõi
  void _addMemberField() {
    setState(() {
      _memberCount++;
      _memberControllers.add(TextEditingController());
      _memberLabels.add('Th√†nh vi√™n $_memberCount');
    });
  }

  // X√≥a field th√†nh vi√™n
  void _removeMemberField(int index) {
    if (_memberControllers.length <= 1) return;

    setState(() {
      _memberControllers[index].dispose();
      _memberControllers.removeAt(index);
      _memberLabels.removeAt(index);
      _updateMemberLabels();
    });
  }

  // C·∫≠p nh·∫≠t l·∫°i label cho c√°c th√†nh vi√™n
  void _updateMemberLabels() {
    for (int i = 0; i < _memberLabels.length; i++) {
      _memberLabels[i] = 'Th√†nh vi√™n ${i + 1}';
    }
  }

  // Pick image t·ª´ gallery
  Future<void> _pickImage() async {
    try {
      final XFile? image = await _picker.pickImage(
        source: ImageSource.gallery,
        maxWidth: 500,
        maxHeight: 500,
        imageQuality: 80,
      );

      if (image != null) {
        setState(() {
          _selectedImage = File(image.path);
        });
      }
    } catch (e) {
      _showErrorSnackBar('L·ªói khi ch·ªçn ·∫£nh: $e');
    }
  }

  // Validate v√† t·∫°o nh√≥m
  void _createGroup() {
    // Validate t√™n nh√≥m
    if (_nameController.text.trim().isEmpty) {
      _showErrorSnackBar('Vui l√≤ng nh·∫≠p t√™n nh√≥m!');
      return;
    }

    // L·∫•y danh s√°ch th√†nh vi√™n (lo·∫°i b·ªè field tr·ªëng)
    final members = _memberControllers
        .map((controller) => controller.text.trim())
        .where((text) => text.isNotEmpty)
        .toList();

    if (members.isEmpty) {
      _showErrorSnackBar('Vui l√≤ng th√™m √≠t nh·∫•t m·ªôt th√†nh vi√™n!');
      return;
    }

    // X·ª≠ l√Ω t·∫°o nh√≥m th√†nh c√¥ng
    // _showSuccessSnackBar(
    //   'ƒê√£ t·∫°o nh√≥m "${_nameController.text}" v·ªõi ${members.length} th√†nh vi√™n!',
    // );

    showDialog(
      context: context,
      builder: (context) =>
          CustomDialog.success(content: "T·∫°o nh√≥m th√†nh c√¥ng"),
    ).then((_) {
      if (mounted) {
        NavigateHelper.goToFamily(context);
      }
    });

    _resetAllFields();
    // Navigator.pop(context);
  }

  // Helper methods cho SnackBar
  void _showErrorSnackBar(String message) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text(message), backgroundColor: Colors.orange),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.grey.shade50,
      appBar: CustomAppBar(
        title: 'T·∫°o nh√≥m',
        onReset: _resetAllFields,
        onSave: _createGroup,
        isUseTextButton: true,
        saveButtonText: 'T·∫°o',
      ),
      body: SingleChildScrollView(
        padding: const EdgeInsets.all(20.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            // Avatar picker
            ImagePickerWidget(
              selectedImage: _selectedImage,
              onImagePick: _pickImage,
            ),

            const SizedBox(height: 32),

            // T√™n nh√≥m
            CustomTextField(
              controller: _nameController,
              labelText: 'T√™n nh√≥m',
              required: true,
              prefixIcon: const Icon(Icons.group_outlined, color: Colors.teal),
            ),

            const SizedBox(height: 20),

            // M√¥ t·∫£ nh√≥m
            CustomTextField(
              controller: _descriptionController,
              labelText: 'M√¥ t·∫£ nh√≥m',
              maxLines: 4,
            ),

            const SizedBox(height: 32),

            // Header th√†nh vi√™n
            _buildMemberHeader(),

            const SizedBox(height: 16),

            // Danh s√°ch th√†nh vi√™n
            ..._buildMemberFields(tooltipText: 'X√≥a th√†nh vi√™n'),

            const SizedBox(height: 24),

            // Tips
            const InfoGuideWidget(message: 'Y√™u c·∫ßu: Nh·∫≠p m√£ ng∆∞·ªùi d√πng'),

            const SizedBox(height: 16),

            const InfoGuideWidget(
              message:
                  "H∆∞·ªõng d·∫´n: V√†o c√†i ƒë·∫∑t t√¨m v√† ch·ªçn 'th√¥ng tin ng∆∞·ªùi d√πng', "
                  "t√¨m v√† sao ch√©p 'ID ng∆∞·ªùi d√πng'",
            ),

            const SizedBox(height: 16),

            const InfoTipWidget(
              message:
                  'M·∫πo: Nh·∫•n n√∫t + ƒë·ªÉ th√™m th√†nh vi√™n. Nh·∫•n n√∫t üîÑ ƒë·ªÉ reset t·∫•t c·∫£.',
            ),

            const SizedBox(height: 40),
          ],
        ),
      ),
    );
  }

  // Build member header v·ªõi counter v√† add button
  Widget _buildMemberHeader() {
    return Row(
      mainAxisAlignment: MainAxisAlignment.spaceBetween,
      children: [
        Text(
          'Th√†nh vi√™n (${_memberControllers.length})',
          style: TextStyle(
            fontSize: 18,
            fontWeight: FontWeight.w600,
            color: Colors.grey.shade800,
          ),
        ),
        Container(
          decoration: BoxDecoration(
            color: Colors.teal,
            borderRadius: BorderRadius.circular(20),
            boxShadow: [
              BoxShadow(
                color: Colors.teal.withValues(alpha: 0.3),
                blurRadius: 8,
                offset: const Offset(0, 2),
              ),
            ],
          ),
          child: IconButton(
            icon: const Icon(Icons.add, color: Colors.white, size: 20),
            onPressed: _addMemberField,
            tooltip: 'Th√™m th√†nh vi√™n',
          ),
        ),
      ],
    );
  }

  // Build danh s√°ch member fields
  List<Widget> _buildMemberFields({required String tooltipText}) {
    return List.generate(_memberControllers.length, (index) {
      return MemberFieldWidget(
        controller: _memberControllers[index],
        label: _memberLabels[index],
        canRemove: _memberControllers.length > 1,
        tooltipText: tooltipText,
        onRemove: () => _removeMemberField(index),
      );
    });
  }

  @override
  void dispose() {
    _nameController.dispose();
    _descriptionController.dispose();
    _disposeMemberControllers();
    super.dispose();
  }
}
